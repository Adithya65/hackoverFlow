# -*- coding: utf-8 -*-
"""urj ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C6lmNKoeijVXKoqfQEbl0yLqqqvDs-g7
"""

import pandas as pd
import numpy as np
import matplotlib_inline
import seaborn as sn
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

from google.colab import drive
drive.mount('/content/drive')

file=pd.read_csv("/content/drive/MyDrive/competitions/buildathon/test1 - Sheet1.csv")

# file=pd.read_csv("/content/drive/MyDrive/competitions/buildathon/buildathon_dataset - Sheet1.csv")

X=file[["temp_min","humidity","rain"]]
y=file["units"]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

"""linear regression


"""

lin = LinearRegression()
lin.fit(X, y)

lin.predict([[23.01,	78.86,	420.5]])

print(lin.score(X,y))

"""polynomial regression"""

import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin = LinearRegression()
lin.fit(X_poly, y)

y_poly_pred = lin.predict(X_poly)

lin.predict(poly_reg.fit_transform([[23.01,	78.86,	420.5]]))

from sklearn import metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print('Mean Absolute Error:', metrics.mean_absolute_error(y,y_poly_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y,y_poly_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y,y_poly_pred)))

# Randomforest

rf = RandomForestRegressor(n_estimators = 50, random_state = 42)
 
rf.fit(X_train,y_train)

predictions = rf.predict([[23.01,	78.86,	420.5]])
 
print(predictions)

y_predtr = rf.predict(X_train)
from sklearn import metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
print(rf.score(X,y))

import tensorflow 
from tensorflow import keras
from sklearn.model_selection import train_test_split
# from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd



from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from sklearn.model_selection import KFold
from sklearn.metrics import confusion_matrix
import itertools

train_data, test_data, train_labels, test_labels = train_test_split(X, y, test_size = 0.3, random_state = 1)

print('Training data shape : ', train_data.shape, train_labels.shape)
print('Testing data shape : ', test_data.shape, test_labels.shape)

dimData = np.prod(train_data.shape[1:])

# Find the unique numbers from the train labels
classes = np.unique(train_labels) #CHecks for unique labels in the traning labels 
nClasses = len(classes) #length of the output
print('Total number of outputs : ', nClasses)
print('Output classes : ', classes)

# Change the labels from integer to categorical data
encoder = LabelEncoder()
encoder.fit(train_labels)
encoded_train_labels = encoder.transform(train_labels)
encoded_train_labels = np_utils.to_categorical(encoded_train_labels)
# print("encoded_train_labels=", encoded_train_labels) 


encoder.fit(test_labels)
encoded_test_labels = encoder.transform(test_labels)

encoded_test_labels = np_utils.to_categorical(encoded_test_labels)
# print("encoded_test_labels=", encoded_test_labels) 

train_labels_one_hot = encoded_train_labels
test_labels_one_hot = encoded_test_labels

#Display the change for category label using one-hot encoding
print('Original label 0 : ', test_labels[:])
print('After conversion to categorical ( one-hot ) : ', test_labels_one_hot[0,:])

"""Step 7: Create the Network """ 

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(1024, activation='sigmoid', input_shape=(dimData,))) # 1st hidden layer
model.add(Dense(512, activation='sigmoid')) # 2nd hidden layer
model.add(Dense(256, activation='sigmoid')) # 2nd hidden layer
# model.add(Dense(512, activation='sigmoid')) # 2nd hidden layer
model.add(Dense(nClasses, activation='softmax')) #softmax for multi class classification

"""Step 8: Compiling the network """

model.compile(optimizer='sgd', loss=tensorflow.keras.losses.MeanSquaredError(), metrics=['accuracy'])

history = model.fit(train_data, train_labels_one_hot, batch_size=32, epochs=20, validation_split = 0.2, verbose=1)